// Файл "tsconfig.json":
// - устанавливает корневой каталог проекта TypeScript;
// - выполняет настройку параметров компиляции;
// - устанавливает файлы проекта.
// Присутствие файла "tsconfig.json" в папке указывает TypeScript, что это корневая папка проекта.
// Внутри "tsconfig.json" указываются настройки компилятора TypeScript и корневые файлы проекта.
// Программа компилятора "tsc" ищет файл "tsconfig.json" сначала в папке, где она расположена, затем поднимается выше и ищет в родительских папках согласно их вложенности друг в друга.
// Команда "tsc --project C:\path\to\my\project\folder" берет файл "tsconfig.json" из папки, расположенной по данному пути.
// Файл "tsconfig.json" может быть полностью пустым, тогда компилятор скомпилирует все файлы с настройками заданными по умолчанию.
{
   "compilerOptions": {
      // Настройки путей для создания выходных файлов.
      "module": "ESNext", // Определяет тип импорта кода в итоговом файле, прописанном в "outFile". Необходимо задавать при использовании опции "outFile".
      "outDir": "./dist", // Поместить все скомпилированные файлы в данную папку, согласно их вложенности в исходниках. Если задана опция "outFile", то опция "outDir" будет проигнорирована.
      // Если "outFile" и "outDir" не заданы, то выходные файлы будут созданы рядом со своими исходниками.
      "baseUrl": ".", // Путь до базовой папки для поиска не относительных путей до файлов.
      "moduleResolution": "node", // Определить способ поиска модулей в папках: как в Node.js или классический, как в TypeScript 1.5 и ниже.
      "paths": {
        // Укажите сопоставление маршрутов для вычисления по сравнению с параметром baseUrl.
        "@/*": ["./src/*"] // Путь относительно "baseUrl".
      },
      "strict": true, // Включить ли все строги проверки типов сразу: noImplicitAny, noImplicitThis, alwaysStrict, strictNullChecks, strictFunctionTypes, strictPropertyInitialization?
      "noImplicitAny": true, // Показывать ошибку, если где-то задан тип "any".
      "target": "es5", // Тип кода создаваемого итогового файла.
      "jsx": "react-jsx", // Включать ли поддержку ".tsx" файлов?
      "allowJs": true, // Разрешать компилировать файлы с JavaScript-кодом?
      "allowSyntheticDefaultImports": true, // Разрешить импортировать модули не имеющие внутри себя "import default"?
      "esModuleInterop": true, // Создать хелперы __importStar и __importDefault для обеспечения совместимости с экосистемой Babel и включить allowSyntheticDefaultImports для совместимости с системой типов.
      "isolatedModules": true, // Обрабатывать каждый файл, как отдельный изолированный модуль.
    },
    // Вместе с компиляцией только конкретных исходных файлов можно компилировать только файлы в заданных папках, которые будут найдены через регулярные выражения, которые принимают только следующие значения:
    // - букву или цифру;
    // - * - ноль или более любых символов, не включая разделители директорий "/" и "\";
    // - ? - один любой символ, не включая разделители директорий "/" и "\";
    // - **/ - рекурсивно включить любую подпапку.
    // Если путь до папки заканчивается так "*" или так ".*", тогда в ней будут скомплированы все файлы с расширениями .ts, .tsx, .d.ts, а также .js и .jsx, если опция "allowJs" будет равна true.
    "include": [
      // Секция "include" позволяет скомпилировать все файлы, находящиеся в заданных папках.
      // Если секция "files" и секция "include" заданы вместе, то будут скомпилированы только файлы, перечисленные в обеих секциях.
      // Все файлы, на которые есть ссылки во включенных файлах из секции "files" и секции "include", также скомпилируются.
       "./src/**/*.ts",
       "./src/**/*.tsx",
    ],
    "ts-node": {
        "compilerOptions": {
            "module": "CommonJS"
        }
    }
  }